import telegram
from telegram import ParseMode, Update
from telegram.ext import Updater, CommandHandler, CallbackContext

import hltv_upcoming_events_bot
import hltv_upcoming_events_bot.service.matches as matches_service
import hltv_upcoming_events_bot.service.tg_notifier as tg_notifier_service
from hltv_upcoming_events_bot import config
from hltv_upcoming_events_bot.bot.utils import log_command


def start_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    engine.message.reply_text(_get_help_text())


def get_upcoming_matches_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    upcoming_matches_str = matches_service.get_upcoming_matches_str()
    send_message(engine.effective_chat.id,
                 '–Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è :(' if not upcoming_matches_str else upcoming_matches_str)


def subscribe_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    ret = tg_notifier_service.add_subscriber(engine.effective_chat.id)
    if ret == tg_notifier_service.RetCode.OK:
        send_message(engine.effective_chat.id, '–ü–æ–¥–ø–∏—Å–∞–ª–∏ –≤–∞—Å. –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–∞—Ö')
    elif ret == tg_notifier_service.RetCode.ALREADY_EXIST:
        send_message(engine.effective_chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üëå')
    else:
        send_message(engine.effective_chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è :(')


def unsubscribe_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    ret = tg_notifier_service.remove_subscriber(engine.effective_chat.id)
    if ret == tg_notifier_service.RetCode.OK:
        send_message(engine.effective_chat.id, '–û—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å :(')
    elif ret == tg_notifier_service.RetCode.NOT_EXIST:
        send_message(engine.effective_chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –∏ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ü§î')
    else:
        send_message(engine.effective_chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏—Ö–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –≤–∞—Å')


def help_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    engine.message.reply_text(_get_help_text(), parse_mode=ParseMode.HTML)


def version_command(engine: Update, context: CallbackContext) -> None:
    log_command(engine)
    engine.message.reply_text(hltv_upcoming_events_bot.__version__, parse_mode=ParseMode.HTML)


def send_message(chat_id: int, msg: str):
    bot = telegram.Bot(config.BOT_TOKEN)
    bot.send_message(chat_id=chat_id, text=msg, parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def start(token: str) -> None:
    engine = Updater(token)
    dispatcher = engine.dispatcher

    # commands
    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("matches", get_upcoming_matches_command))
    dispatcher.add_handler(CommandHandler("subscribe", subscribe_command))
    dispatcher.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("version", version_command))

    engine.start_polling()
    engine.idle()


def _get_help_text() -> str:
    return "–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π:\n" \
           "  - —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –≤ CS:GO\n" \
           "  - —Å—Ä–∞–∑—É –¥–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é\n" \
           "  - –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (/matches)\n" \
           "\n" \
           "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe\n" \
           "\n" \
           "–í—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ HLTV, —Ç–æ –µ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ\n" \
           "\n" \
           "–ö–æ–Ω—Ç–∞–∫—Ç: @DiPaolo"
